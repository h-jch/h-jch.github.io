<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Kei&#39;s Blog</title>
    <link>https://h-jch.github.io/posts/</link>
    <description>Recent content in Posts on Kei&#39;s Blog</description>
    <image>
      <title>Kei&#39;s Blog</title>
      <url>https://h-jch.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://h-jch.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 05 Nov 2023 22:24:29 +0800</lastBuildDate><atom:link href="https://h-jch.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>从生产环境一次数据库死锁说起</title>
      <link>https://h-jch.github.io/posts/code/start-with-production-database-deadlock/</link>
      <pubDate>Sun, 05 Nov 2023 22:24:29 +0800</pubDate>
      
      <guid>https://h-jch.github.io/posts/code/start-with-production-database-deadlock/</guid>
      <description>前言 由于时间问题，先留个坑，后续再填，纯碎记录一下调查过程，虽然最后的结论目前来看是不太对的 背景 上周的一天线上有个接口突然十几个请求同时全部</description>
    </item>
    
    <item>
      <title>SpringBoot定时器原理</title>
      <link>https://h-jch.github.io/posts/code/springboot-scheduled-task/</link>
      <pubDate>Mon, 09 Oct 2023 23:40:49 +0800</pubDate>
      
      <guid>https://h-jch.github.io/posts/code/springboot-scheduled-task/</guid>
      <description>定时器的基础是ScheduledThreadPoolExecutor ScheduledThreadPoolExecutor ScheduledThreadPoolExecutor类支持周期性任务</description>
    </item>
    
    <item>
      <title>Java线程池学习</title>
      <link>https://h-jch.github.io/posts/code/thread-pool-executor/</link>
      <pubDate>Wed, 06 Sep 2023 10:57:38 +0800</pubDate>
      
      <guid>https://h-jch.github.io/posts/code/thread-pool-executor/</guid>
      <description>没有线程池，服务器会在创建新线程和销毁线程上花费的时间和消耗的系统资源要比线程处理实际的用户请求的时间和资源更多 使用线程池的最佳时机 单个任务</description>
    </item>
    
    <item>
      <title>记录编译electerm踩过的坑</title>
      <link>https://h-jch.github.io/posts/code/compile-electerm/</link>
      <pubDate>Wed, 19 Aug 2020 19:19:50 +0800</pubDate>
      
      <guid>https://h-jch.github.io/posts/code/compile-electerm/</guid>
      <description>最近导师给了个任务，让我改一个ssh工具，首选的有PuTTY和electerm。PuTTY这个软件感觉有点古老，而且是C写的，我就选了ele</description>
    </item>
    
    <item>
      <title>css中的选择器</title>
      <link>https://h-jch.github.io/posts/code/css_selector/</link>
      <pubDate>Tue, 11 Aug 2020 16:00:48 +0800</pubDate>
      
      <guid>https://h-jch.github.io/posts/code/css_selector/</guid>
      <description>选择器 基本选择器 标签选择器：选择一类标签。 标签{} 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt; &amp;lt;style&amp;gt; h1 { color:rgb(218, 205, 88); background: #64a2f3; border-radius: 18px; } p { font-size:</description>
    </item>
    
    <item>
      <title>Java注解和反射笔记</title>
      <link>https://h-jch.github.io/posts/code/study-java-reflection/</link>
      <pubDate>Tue, 28 Jul 2020 03:10:40 +0800</pubDate>
      
      <guid>https://h-jch.github.io/posts/code/study-java-reflection/</guid>
      <description>1 注解 1.1 定义 Annotation是从JDK1.5开始引入的技术 作用 不是程序本身，可以对程序作出解释 可以被其他程序（编译器等）读取 格式 @注释名</description>
    </item>
    
    <item>
      <title>Java多线程笔记</title>
      <link>https://h-jch.github.io/posts/code/study-java-thread/</link>
      <pubDate>Sun, 26 Jul 2020 00:13:07 +0800</pubDate>
      
      <guid>https://h-jch.github.io/posts/code/study-java-thread/</guid>
      <description>1 定义 程序 程序是指令和数据的有序集合，没有任何运行的含义，是个静态的概念 进程（process） 进程是执行程序的一次执行过程，是动态的概念 进程</description>
    </item>
    
    <item>
      <title>Java网络编程笔记</title>
      <link>https://h-jch.github.io/posts/code/study-java-network-programming/</link>
      <pubDate>Wed, 22 Jul 2020 23:08:11 +0800</pubDate>
      
      <guid>https://h-jch.github.io/posts/code/study-java-network-programming/</guid>
      <description>&lt;h2 id=&#34;1-ip地址&#34;&gt;1 IP地址&lt;/h2&gt;
&lt;p&gt;使用java的类InetAddress&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SSM整合配置笔记</title>
      <link>https://h-jch.github.io/posts/code/ssm-integration/</link>
      <pubDate>Mon, 20 Jul 2020 00:06:06 +0800</pubDate>
      
      <guid>https://h-jch.github.io/posts/code/ssm-integration/</guid>
      <description>首先新建maven项目，导入相关的依赖，junit，mysql，c3p0，servlet，jsp，jstl，mybatis，mybatis-</description>
    </item>
    
    <item>
      <title>SpringMVC学习笔记</title>
      <link>https://h-jch.github.io/posts/code/study-springmvc/</link>
      <pubDate>Sun, 19 Jul 2020 00:41:40 +0800</pubDate>
      
      <guid>https://h-jch.github.io/posts/code/study-springmvc/</guid>
      <description>1 简介 1.1 定义 首先，MVC是模型（Model），视图（View），控制器（Controller）的简写，是一种软件设计规范 模型（Dao，Ser</description>
    </item>
    
    <item>
      <title>Spring学习笔记</title>
      <link>https://h-jch.github.io/posts/code/study-spring/</link>
      <pubDate>Thu, 16 Jul 2020 17:57:24 +0800</pubDate>
      
      <guid>https://h-jch.github.io/posts/code/study-spring/</guid>
      <description>1 简介 1.1 历史 Spring框架以interface21框架为基础，经过重新设计，并不断丰富其内涵，与2004年3月24日发布了1.0正式版 作者</description>
    </item>
    
    <item>
      <title>MyBatis学习笔记</title>
      <link>https://h-jch.github.io/posts/code/study-mybatis/</link>
      <pubDate>Sat, 11 Jul 2020 19:49:02 +0800</pubDate>
      
      <guid>https://h-jch.github.io/posts/code/study-mybatis/</guid>
      <description>1 简介 1.1 什么是MyBatis 持久层框架 定制化SQL、存储过程和高级映射 使用简单的XML或注解配置，映射原生类型、接口和POJO为数据库中的记</description>
    </item>
    
    <item>
      <title>JavaWeb技术原理</title>
      <link>https://h-jch.github.io/posts/code/javaweb/</link>
      <pubDate>Mon, 06 Jul 2020 21:07:03 +0800</pubDate>
      
      <guid>https://h-jch.github.io/posts/code/javaweb/</guid>
      <description>最近在重温JavaWeb的内容，特此记录一下。 1 基本概念 1.1 前言 web开发： 静态web html，css 提供给所有人看的数据始终不会变化 动态we</description>
    </item>
    
    <item>
      <title>拓扑排序</title>
      <link>https://h-jch.github.io/posts/code/topsort/</link>
      <pubDate>Tue, 30 Jul 2019 23:41:00 +0800</pubDate>
      
      <guid>https://h-jch.github.io/posts/code/topsort/</guid>
      <description>基本概念 拓扑序：如果图中从V到W有一条有向路径，则V一定排在W之前。满足此条件的顶点序列称为一个拓扑序，那么拓扑排序就是获得一个拓扑序的过程</description>
    </item>
    
    <item>
      <title>最小生成树</title>
      <link>https://h-jch.github.io/posts/code/minimum-spanning-tree/</link>
      <pubDate>Tue, 30 Jul 2019 16:37:00 +0800</pubDate>
      
      <guid>https://h-jch.github.io/posts/code/minimum-spanning-tree/</guid>
      <description>基本概念 最小生成树 是一棵树 无回路，向生成树中任加一条边都一定构成回路 |V|个顶点一定有|V|-1条边 是生成树 包含全部顶点 |V|-1条边都在图</description>
    </item>
    
    <item>
      <title>最短路径问题</title>
      <link>https://h-jch.github.io/posts/code/shortest-path/</link>
      <pubDate>Tue, 30 Jul 2019 15:40:00 +0800</pubDate>
      
      <guid>https://h-jch.github.io/posts/code/shortest-path/</guid>
      <description>最短路径问题的抽象 在网络中，求两个不同顶点之间的所有路径中，边的权值之和最小的那一条路径。 这条路径就是两点之间的最短路径 第一个顶点为源点 最后</description>
    </item>
    
    <item>
      <title>图</title>
      <link>https://h-jch.github.io/posts/code/graph/</link>
      <pubDate>Sat, 27 Jul 2019 23:30:00 +0800</pubDate>
      
      <guid>https://h-jch.github.io/posts/code/graph/</guid>
      <description>基本概念 图表示多对多的关系。包含 一组顶点：通常用V(Vertex)表示顶点集合 一组边：通常用E(Edge)表示边的集合 边是顶点对：(v,w)</description>
    </item>
    
    <item>
      <title>排序算法</title>
      <link>https://h-jch.github.io/posts/code/sort/</link>
      <pubDate>Sun, 21 Jul 2019 22:58:00 +0800</pubDate>
      
      <guid>https://h-jch.github.io/posts/code/sort/</guid>
      <description>基本概念 1 void X_Sort(ElementType A[], int N) N是正整数 只讨论基于比较的排序(&amp;lt;、=、&amp;gt;有定义) 只讨论内部排序 稳定性：任意两个相等的数据，排序前后的相对位</description>
    </item>
    
    <item>
      <title>堆</title>
      <link>https://h-jch.github.io/posts/code/heap/</link>
      <pubDate>Thu, 18 Jul 2019 12:27:00 +0800</pubDate>
      
      <guid>https://h-jch.github.io/posts/code/heap/</guid>
      <description>基本概念 堆是一种用数组来实现的完全二叉树。堆分为两种：最大堆(大顶堆)和最小堆(小顶堆)，差别在于结点的排序方式。在最大堆中，任一结点的关键</description>
    </item>
    
    <item>
      <title>写在研究生开学前两个月</title>
      <link>https://h-jch.github.io/posts/code/two-months-before-postgraduate/</link>
      <pubDate>Wed, 03 Jul 2019 23:05:00 +0800</pubDate>
      
      <guid>https://h-jch.github.io/posts/code/two-months-before-postgraduate/</guid>
      <description>录取通知书在上上个礼拜就到了，现在离开学还有两个月。 之前买了一大摞书，想要努力弥补专业能力的不足，也想要降低心中的焦虑感。 熬夜，但想要早睡。</description>
    </item>
    
    <item>
      <title>平衡二叉树</title>
      <link>https://h-jch.github.io/posts/code/balanced-binary-tree/</link>
      <pubDate>Sun, 30 Jun 2019 16:24:00 +0800</pubDate>
      
      <guid>https://h-jch.github.io/posts/code/balanced-binary-tree/</guid>
      <description>对于一般的二叉搜索树，搜索树结点不同插入次序，将导致不同的深度和平均查找长度ASL。甚至在极端的情况下，二叉搜索树会退化称线性的链表，导致插</description>
    </item>
    
    <item>
      <title>二叉搜索树</title>
      <link>https://h-jch.github.io/posts/code/binary-search-tree/</link>
      <pubDate>Sun, 30 Jun 2019 10:06:00 +0800</pubDate>
      
      <guid>https://h-jch.github.io/posts/code/binary-search-tree/</guid>
      <description>二叉搜索树是为了解决动态查找问题而提出来的，也叫做二叉排序树或二叉查找树。 基本概念 二叉搜索树(BST, Binary Search Tree)：一棵二叉树，可以为空；</description>
    </item>
    
    <item>
      <title>二叉树</title>
      <link>https://h-jch.github.io/posts/code/binary-tree/</link>
      <pubDate>Sat, 29 Jun 2019 23:30:00 +0800</pubDate>
      
      <guid>https://h-jch.github.io/posts/code/binary-tree/</guid>
      <description>基本概念 二叉树：一个有穷的结点的集合，这个集合可以为空，若不为空，则它是由根节点和称为其左子树和右子树的两个不相交的二叉树组成。 有几种特殊的</description>
    </item>
    
    <item>
      <title>队列</title>
      <link>https://h-jch.github.io/posts/code/queue/</link>
      <pubDate>Tue, 25 Jun 2019 23:30:00 +0800</pubDate>
      
      <guid>https://h-jch.github.io/posts/code/queue/</guid>
      <description>队列是一种基本的数据结构 基本概念 队列(Queue)：具有一定操作约束的线性表 只能在一端插入，而在另一端删除 数据插入：入队列(AddQ) 数据删</description>
    </item>
    
    <item>
      <title>栈</title>
      <link>https://h-jch.github.io/posts/code/stack/</link>
      <pubDate>Thu, 20 Jun 2019 23:30:00 +0800</pubDate>
      
      <guid>https://h-jch.github.io/posts/code/stack/</guid>
      <description>栈是一种基本的数据结构 基本概念 栈(Stack)：具有一定操作约束的线性表。 只在一端(栈顶，Top)做插入、删除操作 插入数据：入栈(Push)</description>
    </item>
    
    <item>
      <title>线性表</title>
      <link>https://h-jch.github.io/posts/code/linear-list/</link>
      <pubDate>Wed, 19 Jun 2019 23:30:00 +0800</pubDate>
      
      <guid>https://h-jch.github.io/posts/code/linear-list/</guid>
      <description>线性表是最基本的数据结构。 基本概念 线性表(Linear List)：由同类型数据元素构成有序序列的线性结构。 表中元素个数称为线性表的长度 线性表</description>
    </item>
    
    <item>
      <title>C&#43;&#43; const关键字</title>
      <link>https://h-jch.github.io/posts/code/cpp-const/</link>
      <pubDate>Sat, 27 Apr 2019 22:45:00 +0800</pubDate>
      
      <guid>https://h-jch.github.io/posts/code/cpp-const/</guid>
      <description>关于const关键字，有几个注意点。 const的引用 首先是把引用绑定到const对象上，与普通引用不同，对常量的引用不能被用来修改它所绑定的</description>
    </item>
    
    <item>
      <title>c&#43;&#43; primer学习</title>
      <link>https://h-jch.github.io/posts/code/cppprimer-ans/</link>
      <pubDate>Fri, 19 Apr 2019 15:47:00 +0800</pubDate>
      
      <guid>https://h-jch.github.io/posts/code/cppprimer-ans/</guid>
      <description>看《c++ primer》这本书已经很久了，也不敢说自己掌握了多少。之前过了一遍，这本书几乎覆盖了c++的全部知识点，很丰富，但也很杂。 最近在</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://h-jch.github.io/posts/blog/hello-world/</link>
      <pubDate>Thu, 28 Mar 2019 19:43:00 +0800</pubDate>
      
      <guid>https://h-jch.github.io/posts/blog/hello-world/</guid>
      <description>搭建好了这个博客，时机算是有点晚了，但总归是弄好了。 写了多年的日记，积累了几本日记本，这个地方很像日记但又不同于日记。或许是习惯了执笔伏案的</description>
    </item>
    
  </channel>
</rss>
